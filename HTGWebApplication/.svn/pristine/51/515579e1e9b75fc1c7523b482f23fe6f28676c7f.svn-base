package beans.patient;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.Stateless;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import beans.users.UsersBean;

/**
 * Document   : PatientBean.java
 * Version    : Jan 20, 2017
 * Author     : Marufa Chowdhury, Rachel Bautista, Mamadou Diallo, Tuan L. Truong, Rodney Vencio
 * Description: EJB for patient connections
 */
@Stateless
public class PatientBean implements PatientBeanLocal {

    /**
     * Private method to manage connections to jdbc
     * @return Connection the jdbc connection
     */
    private Connection getConnection() {
        Connection conn=null;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            InitialContext ic=new InitialContext();
            DataSource ds=(DataSource)ic.lookup("jdbc/htgConnectionPool");
            conn=ds.getConnection();
        } catch (ClassNotFoundException | NamingException | SQLException ex) {
            Logger.getLogger(UsersBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        return conn;
    }

    /**
     * Method to create patient account by patient
     * @param newUsername the patient username
     * @param usertype the patient username
     * @param newFirstName the patient first name
     * @param newLastName the patient last name
     * @param newEmail the patient email address
     * @param newAddress the patient physical address
     * @param newHomePhone the patient home phone
     * @param newCellPhone the patient cell phone
     * @param dateOfBirth the patient date of birth
     * @param newGender the patient gender
     * @param contractPeriod the contract period
     * @return true when the account has been created
     */
    @Override
    public boolean createPatientAccountByPatient(String newUsername, String usertype, String newFirstName, String newLastName, String newEmail, 
            String newAddress, String newHomePhone, String newCellPhone, Date dateOfBirth, String newGender, String contractPeriod) 
    {
         boolean created=false;
         
         
        try {
           
            PreparedStatement ps;
            try (Connection conn = getConnection()) {
                String sql="{call createPatientAccountByPatient(?,?,?,?,?,?,?,?,?,?,?)}";
                ps = conn.prepareStatement(sql);
                ps.setString(1, newUsername);
                ps.setString(2, usertype);
                ps.setString(3, newFirstName);
                ps.setString(4, newLastName);
                ps.setString(5, newEmail);
                ps.setString(6, newAddress);
                ps.setString(7, newHomePhone);
                ps.setString(8, newCellPhone);
                ps.setDate(9, dateOfBirth); 
                ps.setString(10, newGender);
                ps.setString(11, contractPeriod);
                ps.executeQuery();
                created=true;
                conn.close();
            }
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(PatientBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return created;
    }

    
    /**
     * Method to add a security question to patient account
     * @param activityUser the activity user
     * @param theUsername the patient username
     * @param questionNumberOne the first question
     * @param anwserNumberOne the first answer
     * @param questionNumberTwo the second question
     * @param anwserNumberTwo the second answer
     * @return true when security questions added
     */
    @Override
    public boolean addSecurityQuestion(
            String activityUser, 
            String theUsername, 
            String questionNumberOne, 
            String anwserNumberOne, 
            String questionNumberTwo, 
            String anwserNumberTwo) 
    {
        boolean questionAdded=false;
        
        try {
            PreparedStatement ps;
            try (Connection conn = getConnection()) {
                String sql="{call addSecurityQuestion(?,?,?,?,?,?)}";
                ps = conn.prepareStatement(sql);
                ps.setString(1, activityUser);
                ps.setString(2, theUsername);
                ps.setInt(3, Integer.parseInt(questionNumberOne));
                ps.setString(4, anwserNumberOne);
                ps.setInt(5, Integer.parseInt(questionNumberTwo));
                ps.setString(6, anwserNumberTwo);
                ps.executeQuery();
                questionAdded = true;
                conn.close();
            }
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(PatientBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return questionAdded;
    }

    
    /**
     * Method to edit patient account
     * @param activityUser the activity user
     * @param newUsername the patient username
     * @param newFirstName the patient first name
     * @param newLastName the patient last name
     * @param newEmail the patient email address
     * @param newAddress the patient physical address
     * @param newHomePhone the patient home phone
     * @param newCellPhone the patient cell phone
     * @param dateOfBirth the patient date of birth
     * @param newGender the patient gender
     * @param contractPeriod the contract period
     * @return true when account has been edited
     */
    @Override
    public boolean editPatientAccount(
            String activityUser, 
            String newUsername, 
            String newFirstName, 
            String newLastName, 
            String newEmail, 
            String newAddress, 
            String newHomePhone, 
            String newCellPhone, 
            Date dateOfBirth, 
            String newGender, 
            String contractPeriod) 
    {
        boolean accountEdited=false;
        
        try {
            
            PreparedStatement ps;
            try (Connection conn = getConnection()) {
                String sql="{call editPatientAccount(?,?,?,?,?,?,?,?,?,?,?)}";
                ps = conn.prepareStatement(sql);
                ps.setString(1, activityUser);
                ps.setString(2, newUsername);
                ps.setString(3, newFirstName);
                ps.setString(4, newLastName);
                ps.setString(5, newEmail);
                ps.setString(6, newAddress);
                ps.setString(7, newHomePhone);
                ps.setString(8, newCellPhone);
                ps.setDate(9, dateOfBirth); 
                ps.setString(10, String.valueOf(newGender)); // Hi Linh. Pls check this. there's no ps.setChar() to set the value to SQL (newGender CHAR)
                ps.setString(11, contractPeriod);
                int result=ps.executeUpdate();
                accountEdited=result>0;
                
                conn.close();
            }
            
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(PatientBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return accountEdited;
    }

    
    /**
     * Method to edit a security question to patient account
     * @param activityUser the activity user
     * @param theUsername the patient username
     * @param questionNumberOne the first question
     * @param anwserNumberOne the first answer
     * @param questionNumberTwo the second question
     * @param anwserNumberTwo the second answer
     * @return true when security questions edited
     */
    @Override
    public boolean editSecurityQuestion(
            String activityUser, 
            String theUsername, 
            String questionNumberOne, 
            String anwserNumberOne, 
            String questionNumberTwo, 
            String anwserNumberTwo) 
    {
        boolean questionAdded=false;
        
        try {
            PreparedStatement ps;
            try (Connection conn = getConnection()) {
                String sql="{call editSecurityQuestion(?,?,?,?,?,?)}";
                ps = conn.prepareStatement(sql);
                ps.setString(1, activityUser);
                ps.setString(2, theUsername);
                ps.setInt(3, Integer.parseInt(questionNumberOne));
                ps.setString(4, anwserNumberOne);
                ps.setInt(5, Integer.parseInt(questionNumberTwo));
                ps.setString(6, anwserNumberTwo);System.out.print("a");
                ps.execute();System.out.print("b");
                questionAdded = true;
                
                conn.close();
            }
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(PatientBean.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.print(questionAdded);
        return questionAdded;
    }

    
    
    
}
